(ns nrepl)

(defmacro in-ns [name]
  `(ns ~(second name)))

(import socket)
(import bencodepy)
(import uuid)
(import traceback)

(def host "127.0.0.1")
(def port 58550)
(def debug false)

(def *running* true)
(def *middleware* [])
(def *sessions* [])
(def *session* "")

(defn ^{:doc "Returns a new uuid string"} 
  create-session []
  (str (uuid/uuid4)))

(defn switch-to-new-session []
  (do (def *session* (create-session))
      (def *sessions* (cons *session* *sessions*))
      *session*))

(defn get-session []
  (if (= *session* "")
    (switch-to-new-session)
    *session*))

(defn decode [m]
  (if (instance? m bytes)
    (.decode m "utf-8")
    m))

(defn encode [r] (bencodepy/encode (thaw r)))

(defn ^{:doc "Takes care of encoding the response and sending multiple messages at a time."} 
  send [response conn]
  (if (vector? response)
    (map (fn [r] (.sendall conn (encode r)))
         response)
    (.sendall conn (encode response))))

(defn start-server [host port]
  (prn "nREPL server started on port " port " on host " host " - nrepl://" host ":" port "\n")

  (with [s (socket/socket socket/AF_INET socket/SOCK_STREAM)]
        (.bind s (t host port))
        (.listen s)
        (let [accept (.accept s)
              conn (first accept)
              addr (second accept)]
          (with [conn conn]
                (while *running*
                  (let [data (.recv conn 1024)
                        decoded (->> (bencodepy/decode data)
                                     (map (partial map decode))
                                     hash-map)
                        _ (when debug (print "<--" decoded))
                        response (handle decoded)
                        _ (when debug (print "-->" response))]
                    (send response conn)))))))

(defn done-message [message]
  {:id (at "id" message)
   :session (get-session)
   :status ["done"]})

(comment "possible messages:"
         "add-middleware"
         "clone"
         "close"
         "completions"
         "describe"
         "eval"
         "interrupt"
         "load-file"
         "lookup"
         "ls-middleware"
         "ls-sessions"
         "sideloader-provide"
         "sideloader-start"
         "stdin"
         "swap-middleware"
         "Other common messages: `info` and `complete`")

(defmulti handle (partial at "op"))

(defmethod handle "eval"
  [message]
  (try [{:id (at "id" message)
         :ns (py/print_sexp *ns*)
         :session (get-session)
         :value (->> (at "code" message)
                     read-string
                     eval
                     py/print_sexp)}
        (done-message message)]

       (catch
        [{:id (at "id" message)
          :session (get-session)
          :err (+ "Execution error in " (py/print_sexp *ns*) ".\n"
                  (str *error*))}
         {:ex "class java.lang.Exception"
          "'root-ex'" "class java.lang.Exception"
          :id (at "id" message)
          :session (get-session)
          :status ["eval-error"]}
         (done-message message)])))

(defmethod handle "clone"
  [message]
  {"id" (at "id" message)
   "new-session" (switch-to-new-session)
   "status" ["done"]})

(defmethod handle "describe"
  [message]
  {:op "content"})

(defmethod handle "default"
  [message]
  {:not-implemented "Not implemented yet"})

(defmethod handle "completions"
  [message]
  {:completions []})

(defmethod handle "ls-sessions"
  [message]
  {:sessions *sessions*})

(defmethod handle "ls-middleware"
  [message]
  {:middleware *middleware*})

(defmethod handle "stacktrace"
  [message]
  [{:class "java.lang.Exception"
    :id (at "id" message)
    :message "Error message"
    :session (get-session)
    :stacktrace []}
   (done-message message)])

(defmethod handle "close"
  [message]
  (def *sessions* (remove (partial = (at "session" message)) *sessions*))
  (def *session* "")
  (def *running* false)
  (prn "The current session was closed successfully.\n")
  {})

(start-server host port)