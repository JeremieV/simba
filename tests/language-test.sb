(ns language-test
  (include base)
    :doc "Tests for the built-in language features, such as closures"
    :date-created "3 February 2022"
    :author "Jérémie Vaney"
    ;; :include [base]

  (start-tests "Built-in language features"

    (test "def"
      ;; a definition returns nil
      (def a 3) nil
      ;; a definiton binds a symbol to its evaluated expression
      (do
        (def b (+ 5 (- 10 5)))
        b) 10
      ;; a definition can bind multiple elements at once, if they are in a vector
      (def [c 1 d 2]) nil
      (do
        (def [e 10 f 30])
        (+ e f)) 40
      (do (def [g (+ 50 (* 34 70)) h (- g 430)])
          [2430 2000]) [2430 2000])
      ;; TODO add cases that should throw errors


    (test "closures"
      ;; calling an empty function - should return nil
      ((fn [])) nil
      ((fn [] ())) nil
      (do) nil
      ;; ((fn [a b c] nil)) nil ;; TODO: add a nice error message and an error system for the language

      ;; definitions made inside a closure should not be visible from an outer scope
      ((fn []
         (def a 60)
         a)) 60)
    
    (test "equality"
      (= 1 1) true
      (= nil nil) true
      (= true true) true
      (= false false) true
      (= true false) false
      (= nil true) false
      (= nil false) false
      (= nil 0) false)
    
    (test "identity"
      (is nil nil) true
      (is true true) true
      (is false false) true
      (is true false) false
      (is nil false) false
      )

    (test "booleans"
    ;;   (and true true true) true
    ;;   (and true true false) false
      (and false true) false
      (and false false) false
      ;; other arities

    ;;   (or true true) true
    ;;   (or true false) true
    ;;   (or false true) true
    ;;   (or false false) false
    )
      ;; nand 
      ;; xor

    (test "arithmetic"
      (+ 34 6) 40
      (- 34 34) 0
      (- 34) -34
      (- 0 34) -34
      (* 3 4 5 4) 240
      (% 2 3) 1
      (% 65 213432) 37
      (- 32423 5345 (* 324 32 (+ 323 2 23) 432 3 4234)) -19798399669818))
      ;;  (do
      ;;    ((fn []
      ;;       (def b 60)
      ;;       b))
      ;;    b) ;; catch unresolved symbol error
      ;;  (do
      ;;    (do (def c "text"))
      ;;    c) nil ;; catch unresolved symbol error
       ;; calling with the wrong amount of arguments throws an error

  ;; TODO address the symbol resolution bugs
  ;;

;;   (start-tests "built-in functions"
;;     )


;;   (start-tests "sequence functions"
;;     (test "first"
;;       (first '(1 2) 1)
;;       (first [3 4] 3)
;;       (first []) nil))

;; BUG
;;   (defmacro m [arg]
;;     (def p (eval ~arg))
;;     (+ 2 p))

;;   (pme (m (* 4 6)))


  (defn add3 [x] (+ x 3))
;;   (print (filter is-odd [1 2 3 23 4324 345 354]))


;;   (start-tests "sequence functions"
;;     (test "map"
;;       (map (fn [n] (+ n 10)) [0 1 2 3 4 5]) [10 11 12 13 14 15])
    
;;     (test "filter"
;;       (filter is-odd [1 2 3 23 4324 345 354]) [1 3 23 345]))

  (start-tests "combinators"
    (test "apply"
      (apply add3 3) 6
      (apply not true) false)

    ;; (test "compose"
    ;;   ((compose not =) 2 3) false)
    )

;;   (print ((compose compose compose) not =))

;;   (def zeta 3)

;;   (print (try "hello" zeta))

;;   (throw (exception "Hello"))

;;   (py! "a = 2 + 3")

;;   (print (try "This value"
;;               "This other value"
;;               :catch "There was an exception"
;;               :finally "Some expr that is not returned"))

;;   (prn (globals))
;;   (prn (locals))
  
  (start-tests "keyword arguments"
    (pme (defn my-func []
      :doc "documentation"
      (* 1 2)))
    0)

  (start-tests "try-catch-finally"
    
    (test "`try` with no `catch`"
      (try) nil
      (try nil) nil
      (try "hello") "hello")
    
    (test "try expressions"
      (try
        "string"
        :catch "something else") "string"
      (try
        :catch "error") nil
      (try
        :catch "error"
        :finally "cleanup") nil
      (try
        something ; `something` is not defined
        :catch "There was an exception"
        :finally "Doin' the cleanup") "There was an exception"))
  
  
  (start-tests "interoperability"
    (test "eval"
      1 1)
    
    (test "exec"
      1 1))
  )