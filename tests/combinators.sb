(ns combinators

  (def identity (fn [x] x))

  (def function-application
    (fn [a b] (a b)))

  (def thrush (fn [a b] (b a)))

  ;; compose (bluebird combinator) : (b -> c) -> (a -> b) -> a -> c
  (def compose (fn [f g]
                 (fn [x]
                   (f (g x)))))

  ; aka _constant_
  (def kestrel (fn [a b] a))

  (def kite
    (fn [a b] b))

  (def starling
    (fn [a b c]
      (a (c (b c)))))

  (def mocking-bird (fn [a] (a a))))

(ns main ;; combinators-test
  (include combinators)
  (include test)

  (test/t "Identity test for combinators"
   (combinators/identity 3)
   3)
  
  (def add3 (fn [x] (+ x 3)))
  
  (test/t "Function application"
   (combinators/function-application add3 30)
   33)
  
  (test/t "Thrush"
   (combinators/thrush 30 add3)
   33)

;;   (test/t "Compose"
;;     (do
;;       (def dummy (combinators/compose not combinators/identity))))
  
  (test/t "Kestrel"
    (combinators/kestrel 33 "Something else")
    33)
;;
  (prn "âœ… Tests completed.\n"))