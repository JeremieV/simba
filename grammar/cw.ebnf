program ::= extern_list decl_list 
           | decl_list
# extern_list ::= extern_list extern # left recrusion
#             |  extern
extern_list   ::= extern extern_list_p
extern_list_p ::= extern extern_list_p
                | epsilon

extern ::= "extern" type_spec IDENT "(" params ")" ";"
# decl_list ::= decl_list decl # left recursion
#            |  decl
decl_list   ::= decl decl_list_p
decl_list_p ::= decl decl_list_p
             | epsilon
decl ::= var_decl 
    |  fun_decl
var_decl ::= var_type IDENT ";" 
type_spec ::= "void"
            |  var_type
var_type  ::= "int" |  "float" |  "bool"
fun_decl ::= type_spec IDENT "(" params ")" block
params ::= param_list  
        |  "void" | epsilon
# param_list ::= param_list "," param # left recursion
#             |  param
param_list   ::= param param_list_p
param_list_p ::= "," param param_list_p
              | epsilon
param ::= var_type IDENT
block ::= "{" local_decls stmt_list "}"
# local_decls ::= local_decls local_decl # left recursion
#             |  epsilon
# local_decls   ::= epsilon local_decls_p ## this can be simplified
local_decls ::= local_decl local_decls
              | epsilon
local_decl ::= var_type IDENT ";"
# stmt_list ::= stmt_list stmt # left recursion 
#             | epsilon
# stmt_list   ::= epsilon stmt_list_p ## this can be simplified
stmt_list ::= stmt stmt_list
            | epsilon
stmt ::= expr_stmt 
    |  block 
    |  if_stmt 
    |  while_stmt 
    |  return_stmt
expr_stmt ::= expr ";" 
            |  ";"
while_stmt ::= "while" "(" expr ")" stmt 
if_stmt ::= "if" "(" expr ")" block else_stmt
else_stmt  ::= "else" block
            |  epsilon
# return_stmt ::= "return" ";" 
#             |  "return" expr ";"
return_stmt ::= "return" end_return_stmt
end_return_stmt ::= expr ";" | ";"
# operators in order of increasing precedence      
expr ::= IDENT "=" expr
    | rval
# rval  ::= rval  "||" rval1 | rval1
rval   ::= rval1 rval_p
rval_p ::= "||" rval1 rval_p
        | epsilon 
# rval1 ::= rval1 "&&" rval2 | rval2
rval1   ::= rval2 rval1_p
rval1_p ::= "&&" rval2 rval1_p
         | epsilon

# rval2 ::= rval2 "==" rval3 | rval2 "!=" rval3 | rval3
rval2   ::= rval3 rval2_p
rval2_p ::= "==" rval3 rval2_p
         |  "!=" rval3 rval2_p
         |  epsilon

# rval3 ::= rval3 "<=" rval4 | rval3 "<" rval4 | rval3 ">=" rval4 | rval3 ">" rval4 | rval4
rval3   ::= rval4 rval3_p
rval3_p ::= "<=" rval4 rval3_p
         |  "<"  rval4 rval3_p
         |  ">=" rval4 rval3_p
         |  ">"  rval4 rval3_p
         | epsilon

# rval4 ::= rval4 "+" rval5  | rval4 "-" rval5 | rval5
rval4   ::= rval5 rval4_p
rval4_p ::= "+" rval5 rval4_p
          | "-" rval5 rval4_p
          | epsilon

# rval5 ::= rval5 "*" rval6  | rval5 "/" rval6  | rval5 "%" rval6 | rval6
rval5   ::= rval6 rval5_p
rval5_p ::= "*" rval6 rval5_p
          | "/" rval6 rval5_p
          | "%" rval6 rval5_p
          | epsilon

rval6 ::= "-" rval6 | "!" rval6 | rval7
rval7 ::= "(" expr ")" | rval8
# rval8 ::= IDENT | IDENT "(" args ")" | rval9 # left factor
rval8 ::= IDENT rval8_args | rval9
rval8_args ::= "(" args ")" | epsilon

rval9 ::= INT_LIT | FLOAT_LIT | BOOL_LIT

args ::= arg_list 
       | epsilon
# arg_list ::= arg_list "," expr # left recursion
        #    | expr
arg_list   ::= expr arg_list_p
arg_list_p ::= "," expr arg_list_p
             | epsilon