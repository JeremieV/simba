program ::= extern_list decl_list                                      # "extern", "int", "float", "bool", "void"
           | decl_list
extern_list   ::= extern extern_list_p                                 # "extern"
extern_list_p ::= extern extern_list_p                                 # "extern", epsilon
                | epsilon
extern ::= "extern" type_spec IDENT "(" params ")" ";"                 # "extern"
decl_list   ::= decl decl_list_p                                       # "int", "float", "bool", "void"
decl_list_p ::= decl decl_list_p                                       # "int", "float", "bool", "void", epsilon
             | epsilon
# decl ::= var_decl                                                      # "int", "float", "bool", "void"
#     |  fun_decl
decl ::= var_type IDENT decl_end                                       # "int", "float", "bool", or "void"
       | "void" IDENT fun_decl_end 
decl_end ::= var_decl_end                                              # ";" or "("
           | fun_decl_end

var_decl_end ::= ";"                                                   # ";"
type_spec ::= "void"                                                   # "void", "int", "float", "bool"
            |  var_type
var_type  ::= "int" |  "float" |  "bool"                               # "int", "float", "bool"
fun_decl_end ::= "(" params ")" block                                  # "("
params ::= param_list                                                  # "int", "float", "bool", "void", epsilon
        |  "void" | epsilon
param_list   ::= param param_list_p                                    # "int", "float", "bool"
param_list_p ::= "," param param_list_p                                # ",", epsilon
              | epsilon
param ::= var_type IDENT                                               # "int", "float", "bool"
block ::= "{" local_decls stmt_list "}"                                # "{"
local_decls ::= local_decl local_decls                                 # "int", "float", "bool", epsilon
              | epsilon
local_decl ::= var_type IDENT ";"                                      # "int", "float", "bool"
stmt_list ::= stmt stmt_list                                           # first expr, ";", "{", "if", "while", "return", epsilon
            | epsilon
stmt ::= expr_stmt                                                     # first expr, ";", "{", "if", "while", "return"
    |  block 
    |  if_stmt 
    |  while_stmt 
    |  return_stmt
expr_stmt ::= expr ";" | ";"                                           # first expr, ";"
while_stmt ::= "while" "(" expr ")" stmt                               # "while"
if_stmt ::= "if" "(" expr ")" block else_stmt                          # "if"
else_stmt  ::= "else" block                                            # "else", epsilon
            |  epsilon
return_stmt ::= "return" expr_stmt                                     # "return"

expr ::= IDENT "=" expr                                                # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
    | rval
rval   ::= rval1 rval_p                                                # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval_p ::= "||" rval1 rval_p                                           # "||", epsilon
        | epsilon 
rval1   ::= rval2 rval1_p                                              # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval1_p ::= "&&" rval2 rval1_p                                         # "&&", epsilon
         | epsilon
rval2   ::= rval3 rval2_p                                              # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval2_p ::= "==" rval3 rval2_p                                         # "==", "!=", epsilon
         |  "!=" rval3 rval2_p
         |  epsilon
rval3   ::= rval4 rval3_p                                              # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval3_p ::= "<=" rval4 rval3_p                                         # "<=", "<", ">=", ">", epsilon
         |  "<"  rval4 rval3_p
         |  ">=" rval4 rval3_p
         |  ">"  rval4 rval3_p
         | epsilon
rval4   ::= rval5 rval4_p                                              # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval4_p ::= "+" rval5 rval4_p                                          # "+", "-", epsilon
          | "-" rval5 rval4_p
          | epsilon
rval5   ::= rval6 rval5_p                                              # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval5_p ::= "*" rval6 rval5_p                                          # "*", "/", "%", epsilon
          | "/" rval6 rval5_p
          | "%" rval6 rval5_p
          | epsilon

rval6 ::= "-" rval6 | "!" rval6 | rval7                                # "-", "!", "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval7 ::= "(" expr ")" | rval8                                         # "(", IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval8 ::= IDENT rval8_args | rval9                                     # IDENT, INT_LIT, FOAT_LIT, BOOL_LIT
rval8_args ::= "(" args ")" | epsilon                                  # "(", epsilon
rval9 ::= INT_LIT | FLOAT_LIT | BOOL_LIT                               # INT_LIT, FOAT_LIT, BOOL_LIT
args ::= arg_list                                                      # first arg_list, epsilon
       | epsilon
arg_list   ::= expr arg_list_p                                         # first expr if not nullable
arg_list_p ::= "," expr arg_list_p                                     # ",", epsilon
             | epsilon